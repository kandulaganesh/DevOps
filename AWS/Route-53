Amazon Route 53 is a highly available and scalable cloud Domain Name System (DNS) web service. It is designed to give developers and businesses an extremely reliable and cost effective way to route end users to Internet applications by translating names like www.example.com into the numeric IP addresses like 192.0.2.1 that computers use to connect to each other. Amazon Route 53 is fully compliant with IPv6 as well.

Route53 is not a regional service.. it is Global Service..


Route53 is a DNS provider.

AWS Route 53 takes its name with reference to Port 53

Hosted Zones:

A hosted zone is a container for records, and records contain information about how you want to route traffic for a specific domain, such as example.com, and its subdomains (acme.example.com, zenith.example.com). A hosted zone and the corresponding domain have the same name. There are two types of hosted zones:

	1. Public hosted zones contain records that specify how you want to route traffic on the internet. For more information, see Working with public hosted zones.

	2. Private hosted zones contain records that specify how you want to route traffic in an Amazon VPC. For more information, see Working with private hosted zones.


After you create a hosted zone for your domain, such as example.com, you create records to tell the Domain Name System (DNS) how you want traffic to be routed for that domain.

For example, you might create records that cause DNS to do the following:

Route internet traffic for example.com to the IP address of a host in your data center.

Route email for that domain (ichiro@example.com) to a mail server (mail.example.com).

Route traffic for a subdomain called operations.tokyo.example.com to the IP address of a different host.

Each record includes the name of a domain or a subdomain, a record type (for example, a record with a type of MX routes email), and other information applicable to the record type (for MX records, the host name of one or more mail servers and a priority for each server). For information about the different record types, see Supported DNS record types.

The name of each record in a hosted zone must end with the name of the hosted zone. For example, the example.com hosted zone can contain records for www.example.com and accounting.tokyo.example.com subdomains, but cannot contain records for a www.example.ca subdomain.





Alias:
Amazon Route 53 alias records provide a Route 53–specific extension to DNS functionality. It is a AWS functionality.Alias records let you route traffic to selected AWS resources.They also let you route traffic from one record in a hosted zone to another record.

So Alias is abt pointing the Domain to the AWS Resource.

The chief difference between a CNAME record and an ALIAS record is not in the result—both point to another DNS record—but in how they resolve the target DNS record when queried.  As a result of this difference, one is safe to use at the zone apex (e.g., naked domain, such as example.com) and the other is not.

You can use CNAME Records in Route53 to point to hostnames outside of AWS. With an Alias record, it has to be pointing to an AWS resource. 

Unlike a CNAME record, you can create an alias record at the top node of a DNS namespace, also known as the zone apex. For example, if you register the DNS name example.com, the zone apex is example.com. You can't create a CNAME record for example.com, but you can create an alias record for example.com that routes traffic to www.example.com.



This makes it more flexible than a CNAME, which cannot be used at the zone apex.

CNAME cannot be used for Zone apex.

ALIAS s faster than CNAME.




Routing Policies:
1. Simple Routing (Default)
	Default routing policy... multiple addresses result in random selection
	No health checks
	DNS returns multiple values, and client will select one of them.

2. Weighted Routing
	Route traffic based on weighted values to split traffic
	Application testing like beta version test
	Health Checks
	DNS will return only one value

3. Latency-Based Routing
	Route traffic to region resource with lowest latency
	Return one value
	Health checks
	Return value from region which is close to us.

4. Failover Routing
	route traffic to secondary endpoint if primary is unhealthy
	Health check is mandatory for primary routes
	Not mandatory for secondary routes

5. GeoLocation
	Route based on users location
	All traffic coming from dummy country must route to this ip

6. Geo-Proximity Routing
	route traffic based on region of location of resources
	Cannot create using record-set, have to use Traffic-flow
	Suppose send traffic of users around 1km of resource.
	Boundary based.

7. MultiValue-answer Routing
	Same as simple Routing but here it will select random record and check for health, if endpoint is unheathy, it will check another record.
	Return upto 8 records

	If we update TTL for one record, it will automatically update all records.


Route53 Traffic Flow

	A Visual Editor lets you to create sophisticated routing configurations.

	Support Versioning, so that we can rollout or rollback. 


Route53 can create or check for the heath of endpoints.

	and we can take appropriate action like creating an alarm using cloudWatch.


While checking health check, it supports

	HTTP,HTTPS,TCP

	In HTTPS, it will not get any certificates (No SSL verification)

	We can make Route53 to watch the Cloudwatch Alarms


Resolver:

	it will help in directing traffic to on premise infra.
	i.e from VPC to on-premise N/W




In AWS, the most common records:

1. A: hostname to IPV4
2. AAAA: hostname to IPV6
3. CNAME: hostname to hostname
4. ALIAS: hostname to AWS resource


Features:

1. Health checks
2. Loadbalance
3. Public Domain
4. Private Domain's that can be resolved by instances in VPC.


There are two phases,

	1. Registering the domain (Like taking propriety on a domain, so that this domain is not available for other's)
	2. Mapping the registered domain to endpoints(Can be anything) (HostedZones)

Register:

	1. What ever the domain name we want i.e like kandulaganeshweb.com (any site thay we own)
	2. We are registering a domain means we are locking the ROOT Domain.


A hosted zone is a container for records, and records contain information about how you want to route traffic for a specific domain, such as example.com, and its subdomains (acme.example.com, zenith.example.com). A hosted zone and the corresponding domain have the same name. There are two types of hosted zones:

Public hosted zones contain records that specify how you want to route traffic on the internet. For more information, see Working with public hosted zones.

Private hosted zones contain records that specify how you want to route traffic in an Amazon VPC.

When a webbrowser sent a request to DNS for ip address of domain... , first it will check in cache.. whether ip-address is there or not, if not then ping the DNS Server.. else take from the cache..

But to avoid stale DNS records.. we have TTL.. when we send for record to DNS.. Along with ip-address of Domain.. we will get TTL of those records...

Difference between CNAME and ALIAS:

CNAME:
	1. Points a hostname to any other hostname (myapp.mydomain.com => blahblah.anything.com)
	2. ONLY FOR NONROOT DOMAINS (anything.mydomain.com) i.e we can't create CNAME for ROOT DOMAIN

		ROOT DOMAINS: mydomain.com
		NONROOT DOMAIN: something.mydomain.com


ALIAS:
	1. Points a hostname to an AWS Resource (app.mydomain.com to blabla.amazonaws.com)
	2. Works for ROOT Domain and NON-ROOT Domain


Routing Policy:
  Types:
  	1. Simple Routing Policy
  		a. No Health Checks
  	2. Weighted Routing Policy
  		a. Control the percentage of requests that go to specific endpoint.
  		b. Helps to test 1% of traffic on new app version
  		c. Helps in distributing traffic in b/w regions
  		d. Can be associated to health checks
  	3. Latency Routing Policy
  		a. User redirected to the server that has least latency close to us.
  		b. Latency is evaluated based on terms of user to designated AWS Region.
  		c.While creating the record... it will ask for location i.e the entered end pint belongs to which location
  			We can mention the region of the domain

  	4. Failover Routing Policy
  		a. Here we configure Route53 point to primary and secondary.. if primary health check fails, Route53 will automatically send requests to secondary
  	5. GeoLocation Routing Policy
  		a. Routing based on User location...
  		b. i.e if request is originating from "US", then send traffic to this particular IP
  		
  	6. MultiValued Routing Policy
  		a. Use when routing traffic to multiple resources
  		b. Upto 8 healthy records are returned for each query
  		c. let client decide to which request need to send


 The simple routing which reads the A record and returns all the values the record contains, regardless of their health status. However, multi value policy can have the health checks associated and will only return the healthy records for a DNS request.


The difference between load balancer and route 53. Load balancer distributes traffic and balances it among EC2 instance within the same region whereas Route 53 can load balance in different region.




Health Checks:

	1. Checks whether the instance is healthy or not....


Route53 can monitor:

	1. EndPoint i.e it can be IP address or URL
	2. Status of other health checks
	3. Status of Cloudwatch Alarm


Along with the Ip Address, Route-53 also sends TTL Period for expiring the records.


CNAME:

	Points hostname to another hostname

	Only for NON-ROOT Domains


References:
1. https://aws.amazon.com/route53/
2. https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/rrsets-working-with.html


