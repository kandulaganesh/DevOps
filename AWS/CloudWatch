Amazon CloudWatch is a monitoring and observability service built for DevOps engineers, developers, site reliability engineers (SREs), and IT managers. CloudWatch provides you with data and actionable insights to monitor your applications, respond to system-wide performance changes, optimize resource utilization, and get a unified view of operational health. CloudWatch collects monitoring and operational data in the form of logs, metrics, and events, providing you with a unified view of AWS resources, applications, and services that run on AWS and on-premises servers. You can use CloudWatch to detect anomalous behavior in your environments, set alarms, visualize logs and metrics side by side, take automated actions, troubleshoot issues, and discover insights to keep your applications
running smoothly.



Amazon CloudWatch is a monitoring service for AWS cloud resources and the applications you run on AWS. You can use Amazon CloudWatch to collect and track metrics, collect and monitor log files, and set alarms. Amazon CloudWatch can monitor AWS resources such as Amazon EC2 instances, Amazon DynamoDB tables, and Amazon RDS DB instances, as well as custom metrics generated by your applications and services, and any log files your applications generate. You can use Amazon CloudWatch to gain system-wide visibility into resource utilization, application performance, and operational health. You can use these insights to react and keep your application running smoothly.





Amazon CloudWatch Events delivers a near real-time stream of system events that describe changes in Amazon Web Services (AWS) resources. Using simple rules that you can quickly set up, you can match events and route them to one or more target functions or streams. CloudWatch Events becomes aware of operational changes as they occur. CloudWatch Events responds to these operational changes and takes corrective action as necessary, by sending messages to respond to the environment, activating functions, making changes, and capturing state information.



Cloud watch will watch the resources, services, and applications and generate the metrics based on the logs, events or ... . , In cloud watch we can create a alarm and attach it to any metric we want. if there is any change in metric (Above the threshold), cloudwatch will generate the alarm.



In CloudWatch, we can create alarm and attach the alarm to a resource metrics.



Helps in monitoring, metrics, alerts, and logs the health of the application, resources and services.

1. Visualize the applications and resources
2. Set an alarm



Creates CloudWatch Alarm to dynamically scale the Instances based on health


CloudWatch:

	1. Logs
		a. LogGroup
		For More Ifo see below section

	2. Metrics
		a. Cutting the data based on some patterns and drawing some conclusions.
	3. Events


	Logs:

		Using CloudWatch agent on the services.. it will stream all the logs(Logfile) to the CloudWatch Dashboard (to the loggroup, loggroup can have many log streams.)

		CloudWatch aget runs as a systemd service.. i.e systemctl status awslogsd.service

		While configuring ClouWatchLogs, we have two config files
		1. /etc/awslogs/awscli.conf => To set the appropriate AWS region
		2. /etc/awslogs/awslogs.conf => Set which log file agent has to stream.
			[general]
			state_file = /var/lib/awslogs/agent-state
			[application_logs]
			region = ap-south-1
			datetime_format = %b %d %H:%M:%S
			file = /var/log/application.log        <------  This is our custom log file, we can give anything like /var/log/messages
			buffer_duration = 5000
			log_stream_name = {instance_id}        <------  This is stream name that is present in logGroup
			initial_position = start_of_file
			log_group_name = application_logs      <------  This is logGroup name in the logs section of cloudWatch





Event:

	Events can self-trigger based on a schedule; alarms don't do this

	Amazon CloudWatch Events delivers a near real-time stream of system events that describe changes in Amazon Web Services (AWS) resources. Using simple rules that you can quickly set up, you can match events and route them to one or more target functions or streams. CloudWatch Events becomes aware of operational changes as they occur. CloudWatch Events responds to these operational changes and takes corrective action as necessary, by sending messages to respond to the environment, activating functions, making changes, and capturing state information.

	You can also use CloudWatch Events to schedule automated actions that self-trigger at certain times using cron or rate expressions.

	Cloudwatch Events = crontab or infrastructure change (it happened or its time)

	Cloudwatch Alarms = take action based on metrics (the value is X)

Alarm:

	You can create a CloudWatch alarm that watches a single CloudWatch metric or the result of a math expression based on CloudWatch metrics. The alarm performs one or more actions based on the value of the metric or expression relative to a threshold over a number of time periods. The action can be an Amazon EC2 action, an Amazon EC2 Auto Scaling action, or a notification sent to an Amazon SNS topic.

	Alarms invoke actions only for sustained changes.

	Alarms watch a single metric and respond to changes in that metric; events can respond to actions (such as a lambda being created or some other change in your AWS environment)

	Alarms invoke actions for sustained state changes only. CloudWatch alarms don't invoke actions simply because they are in a particular state, the state must have changed and been maintained for a specified number of periods.


We have log group and inside them we have log stream

CodeBuild will stream it's log to the CloudWatch


IAM Roles scope is at the Instance or Container level, i.e we can't assign IAM role for an application or for an init process

CloudWatch Agent:

	1. CloudWatch Logs Agent
		a. Only send application logs
	2. Unified Agent
		a. It also sends system metrics like RAM, process...


Event Bridge:

	Next Evolution of CloudWatch Events

	Default Event Bus: This Bus is used by Events generated by AWS Services
	But we can create custom Bus for capturing Events from Custom/External sources i.e from DataDog,Our applications



CloudWatch Logs never expire


CloudWatch Logs expiration policy should be defined at Group Level, not stream level

